리스트 : 변수에 여러 값을 대입할 수 있는 변수, 자료형

1. [ 요소 1, 요서 2. 요소 3......] 처럼 기술한다.

2. 다른 자료형이 섞여있어도 된다.

3. 리스트 안에 리스트 : 중첩된 구조 가능하다.

4. 리스트에서 값 추출 : 인덱스 번호라고 한다. 

인덱스는 0부터 시작한다.
가장 마지막 요소 : -1
끝에서 두번째 요소 : -2

5. 리스트에서 리스트 추출(슬라이스)
: 리스트[ : ]

a = [1,2,3,4,5]
b = [1,2,3,'a','b']

# 1-2. 리스트 슬라이싱
a = [1,2,3,4,5]
print(a[:2])  # [1, 2]

6. 리스트 요소 갱신 및 추가
: 리스트[인덱스 번호] = 값

7. 리스트의 요소 삭제
: del 리스트[인덱스 번호]

8. 리스트형의 주의점
리스트 변수를 다른 변수에 대입한 뒤 대입한 변수에서 값을 바꾸면 원래 변수의 값도 바뀐다.
이를 막으려면, y = x 대신 y = x[ : ]  또는 y = list(x) 라고 쓴다.

9. 딕셔러리형
: 여러 데이터를 다룰때 사용
키(key)와 값(value) 상으로 연결되어 있어 키를 통해 연결되어 있는 값을 얻는다.

10. 딕셔러리 요소 추출
: 딕셔러리["키"] 라고 기술한다.

11. 딕셔러리 갱신 및 추가
갱신 : 딕셔러리명["값을 갱신할 키"] = 값
추가 : 딕셔러리명["추가할 키"] = 값

12. 딕셔러리 요소 삭제
: del 딕셔러리["삭제할 키"]

while문

1. 주어진 조건식이 False가 될 때까지 처리를 반복한다.(무한 루프) 

2. 조건식의 변수값을 갱신하지 않거나 항상 성립되도록 하면 루프가 무한정 반복된다.(주의 해야함!!)

3. while + if 문도 가능하다.

for문
: 리스트의 요소를 모두 출력하고 싶을때 자주 사용
for 변수 in 데이터셋:

break
: 반복 처리 종료 / if문과 함께 사용되는 경우가 많다.

continue
: break와 마찬가지로 if문과 조합해서 사용하지만,break와 달리 특정 조건일때
루프를 한 번 건너뛴다.

리스트 안의 리스트 루프
: for a, b, c... in 변수(리스트형)
a, b, c.... 의 개수는 리스트의 요소와 같아야 한다.

딕셔러리형 리스트
: 키와 값을 모두 변수로 하여 무한루프를 할 수 있다.
